// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241001154503_BarBuddy")]
    partial class BarBuddy
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Property<Guid>("BarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BarName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BarId");

                    b.ToTable("Bar");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("BookingTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsIncludeDrink")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.Property<Guid>("BookingDrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("ActualPrice")
                        .HasColumnType("double");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookingDrinkId");

                    b.HasIndex("BookingId");

                    b.HasIndex("DrinkId");

                    b.ToTable("BookingDrink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.Property<Guid>("BookingTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ReservationTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookingTableId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TableId");

                    b.ToTable("BookingTable");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("DrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DrinkCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("DrinkId");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Property<Guid>("DrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinksCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DrinksCategoryId");

                    b.ToTable("DrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.Property<Guid>("DrinkEmotionalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmotionalDrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("DrinkEmotionalCategoryId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("EmotionalDrinkCategoryId");

                    b.ToTable("DrinkEmotionalCategory");
                });

            modelBuilder.Entity("Domain.Entities.EmotionalDrinkCategory", b =>
                {
                    b.Property<Guid>("EmotionalDrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EmotionalDrinksCategoryId");

                    b.ToTable("EmotionalDrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("FeedbackDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("BookingId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.Property<Guid>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PaymentFee")
                        .HasColumnType("double");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentHistory");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TableTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("TableId");

                    b.HasIndex("BarId");

                    b.HasIndex("TableTypeId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Property<Guid>("TableTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaximumGuest")
                        .HasColumnType("int");

                    b.Property<int>("MinimumGuest")
                        .HasColumnType("int");

                    b.Property<double>("MinimumPrice")
                        .HasColumnType("double");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TableTypeId");

                    b.ToTable("TableType");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Accounts")
                        .HasForeignKey("BarId");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Bookings")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingTables")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Table", "Table")
                        .WithMany("BookingTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.HasOne("Domain.Entities.DrinkCategory", "DrinkCategory")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("DrinkEmotionalCategories")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EmotionalDrinkCategory", "EmotionalDrinkCategory")
                        .WithMany()
                        .HasForeignKey("EmotionalDrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("EmotionalDrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Tables")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TableType", "TableType")
                        .WithMany("Tables")
                        .HasForeignKey("TableTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("DrinkEmotionalCategories");
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
