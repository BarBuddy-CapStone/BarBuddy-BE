// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Property<Guid>("BarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BarName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BarId");

                    b.ToTable("Bar");

                    b.HasData(
                        new
                        {
                            BarId = new Guid("437ec242-8bec-44e0-9ff7-faca2be0a3b0"),
                            Address = "87A Hàm Nghi, Phường Nguyễn Thái Bình, Quận 1",
                            BarName = "Bar Buddy 1",
                            Description = "Bar Buddy được thiết kế với lối kiến trúc cổ điển, lấy cảm hứng từ phong cách Tây Ban Nha với vẻ đẹp hoài cổ, độc đáo. Quán được xây dựng với những bức tường gạch thô gai góc, dùng ánh sáng màu đỏ và vàng rất huyền ảo. Không giống với những quán bar quận 1 khác thường thuê DJ chơi nhạc thì Carmen Bar lại thuê ban nhạc sống với những bài cực chill.",
                            Discount = 0.0,
                            Email = "booking1@barbuddy.com",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            Images = "barbuddy1.png",
                            PhoneNumber = "0908880888",
                            StartTime = new TimeSpan(0, 2, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("0ba113f9-1c3e-4e12-a725-5be58af28e46"),
                            Address = "87A Hàm Nghi, Phường Nguyễn Thái Bình, Quận 1",
                            BarName = "Bar Buddy 2",
                            Description = "Bar Buddy được thiết kế với lối kiến trúc cổ điển, lấy cảm hứng từ phong cách Tây Ban Nha với vẻ đẹp hoài cổ, độc đáo. Quán được xây dựng với những bức tường gạch thô gai góc, dùng ánh sáng màu đỏ và vàng rất huyền ảo. Không giống với những quán bar quận 1 khác thường thuê DJ chơi nhạc thì Carmen Bar lại thuê ban nhạc sống với những bài cực chill.",
                            Discount = 0.0,
                            Email = "booking2@barbuddy.com",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            Images = "barbuddy2.png",
                            PhoneNumber = "0907770777",
                            StartTime = new TimeSpan(0, 2, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("0e234b28-0409-461d-a5e8-24fa690ed5c9"),
                            Address = "87A Hàm Nghi, Phường Nguyễn Thái Bình, Quận 1",
                            BarName = "Bar Buddy 2",
                            Description = "Bar Buddy được thiết kế với lối kiến trúc cổ điển, lấy cảm hứng từ phong cách Tây Ban Nha với vẻ đẹp hoài cổ, độc đáo. Quán được xây dựng với những bức tường gạch thô gai góc, dùng ánh sáng màu đỏ và vàng rất huyền ảo. Không giống với những quán bar quận 1 khác thường thuê DJ chơi nhạc thì Carmen Bar lại thuê ban nhạc sống với những bài cực chill.",
                            Discount = 0.0,
                            Email = "booking2@barbuddy.com",
                            EndTime = new TimeSpan(0, 18, 0, 0, 0),
                            Images = "barbuddy3.png",
                            PhoneNumber = "0906660666",
                            StartTime = new TimeSpan(0, 2, 0, 0, 0),
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("BookingTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsIncludeDrink")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.Property<Guid>("BookingDrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("ActualPrice")
                        .HasColumnType("double");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookingDrinkId");

                    b.HasIndex("BookingId");

                    b.HasIndex("DrinkId");

                    b.ToTable("BookingDrink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.Property<Guid>("BookingTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ReservationTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookingTableId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TableId");

                    b.ToTable("BookingTable");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("DrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DrinkCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DrinkId");

                    b.HasIndex("BarId");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Property<Guid>("DrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinksCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDrinkCategory")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DrinksCategoryId");

                    b.ToTable("DrinkCategory");

                    b.HasData(
                        new
                        {
                            DrinksCategoryId = new Guid("b7323bd5-5916-4b7e-8a97-5640ccc51d6a"),
                            Description = "Đồ uống không cồn như soda, nước ngọt có ga, và nước ngọt có hương vị.",
                            DrinksCategoryName = "Nước ngọt",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("58fb5e54-572c-467a-9eed-671d128466d3"),
                            Description = "Đồ uống pha trộn thường chứa cồn, kết hợp với nước trái cây, soda hoặc các nguyên liệu khác.",
                            DrinksCategoryName = "Cocktail",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("832ae040-99a1-4085-9223-3adb19cc1e10"),
                            Description = "Phiên bản không cồn của các loại cocktail, phù hợp cho những người không uống rượu.",
                            DrinksCategoryName = "Mocktail",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("df2748ed-9505-4c53-a051-832a58178fcb"),
                            Description = "Đồ uống có cồn mạnh như vodka, whisky, gin, rum, v.v.",
                            DrinksCategoryName = "Rượu mạnh",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("b66227e3-5ed5-4cfc-bdc4-f4cf3111518f"),
                            Description = "Đồ uống có cồn được ủ từ lúa mạch, hoa bia và nước. Có nhiều loại khác nhau như lager, ale, stout.",
                            DrinksCategoryName = "Bia",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("838b20cb-59e2-4cea-8697-9175d65e073b"),
                            Description = "Đồ uống có cồn được làm từ nho lên men, có nhiều loại như vang đỏ, vang trắng và vang hồng.",
                            DrinksCategoryName = "Rượu vang",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("3ed8536c-2c08-4885-a40f-d2ddab043213"),
                            Description = "Đồ uống nóng hoặc lạnh được pha từ lá trà, có nhiều loại như trà đen, trà xanh và trà thảo mộc.",
                            DrinksCategoryName = "Trà",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("dd73a16a-1b65-4a16-b362-a0684871c441"),
                            Description = "Đồ uống nóng hoặc lạnh được pha từ hạt cà phê rang, bao gồm espresso, cappuccino, latte và nhiều loại khác.",
                            DrinksCategoryName = "Cà phê",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("bcefd6f6-6920-4b3b-ab96-b65e888501bb"),
                            Description = "Đồ uống tự nhiên được làm từ nước ép trái cây hoặc rau củ. Các loại phổ biến gồm nước cam, nước táo, và nước ép cà rốt.",
                            DrinksCategoryName = "Nước ép",
                            IsDrinkCategory = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.Property<Guid>("DrinkEmotionalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmotionalDrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("DrinkEmotionalCategoryId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("EmotionalDrinkCategoryId");

                    b.ToTable("DrinkEmotionalCategory");
                });

            modelBuilder.Entity("Domain.Entities.EmotionalDrinkCategory", b =>
                {
                    b.Property<Guid>("EmotionalDrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EmotionalDrinksCategoryId");

                    b.ToTable("EmotionalDrinkCategory");

                    b.HasData(
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("02400312-0f91-4f36-8bca-dfe2f6dd3474"),
                            CategoryName = "vui"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("daa72b40-943f-4ff5-a04a-7c0540427148"),
                            CategoryName = "buồn"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("62c31517-a522-4a68-bb49-149d8d513849"),
                            CategoryName = "hạnh phúc"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("db4db77f-4c8d-43a9-b8ee-6d2784a88990"),
                            CategoryName = "tức giận"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("ceb54398-3b7b-4880-9f63-4803e5392b1d"),
                            CategoryName = "chán nản"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("acc778d4-6731-4112-8350-e91028e2a5f5"),
                            CategoryName = "đang yêu"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("BookingId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.Property<Guid>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PaymentFee")
                        .HasColumnType("double");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentHistory");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("5809b817-cf77-4fb4-af1c-58d2e64ef440"),
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            RoleId = new Guid("90e6600e-4ed1-4069-8a59-2a441961d346"),
                            RoleName = "STAFF"
                        },
                        new
                        {
                            RoleId = new Guid("e47efe76-b3a0-4eff-bc7d-49f86bab88cd"),
                            RoleName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TableTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("TableId");

                    b.HasIndex("BarId");

                    b.HasIndex("TableTypeId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Property<Guid>("TableTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaximumGuest")
                        .HasColumnType("int");

                    b.Property<int>("MinimumGuest")
                        .HasColumnType("int");

                    b.Property<double>("MinimumPrice")
                        .HasColumnType("double");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TableTypeId");

                    b.ToTable("TableType");

                    b.HasData(
                        new
                        {
                            TableTypeId = new Guid("62598865-2fb3-4e0e-bc46-f4b831cbbf9a"),
                            Description = "Bàn SVIP phù hợp cho khách hàng muốn trải nghiệm dịch vụ chất lượng cao nhất tại quán, phù hợp cho nhóm khách hàng từ 1-15 người, mức giá tối thiểu chỉ từ 10.000.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 15,
                            MinimumGuest = 1,
                            MinimumPrice = 10000000.0,
                            TypeName = "Bàn SVIP"
                        },
                        new
                        {
                            TableTypeId = new Guid("d5a1df46-a232-47cf-aa30-2894c5069e43"),
                            Description = "Bàn VIP phù hợp cho khách hàng muốn trải nghiệm dịch vụ chất lượng cao tại quán, phù hợp cho nhóm khách hàng từ 1-10 người, mức giá tối thiểu chỉ từ 5.000.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 10,
                            MinimumGuest = 1,
                            MinimumPrice = 5000000.0,
                            TypeName = "Bàn VIP"
                        },
                        new
                        {
                            TableTypeId = new Guid("949e2731-f7a0-4134-884e-9da99ae097f4"),
                            Description = "Bàn Tiêu chuẩn 1 phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán, phù hợp cho nhóm khách hàng từ 1-4 người, mức giá tối thiểu chỉ từ 200.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 4,
                            MinimumGuest = 1,
                            MinimumPrice = 200000.0,
                            TypeName = "Bàn Tiêu chuẩn 1"
                        },
                        new
                        {
                            TableTypeId = new Guid("7dfc0d07-dd60-483b-96ff-146e69f596e6"),
                            Description = "Bàn Tiêu chuẩn 2 phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán, phù hợp cho nhóm khách hàng từ 4-6 người, mức giá tối thiểu chỉ từ 500.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 6,
                            MinimumGuest = 4,
                            MinimumPrice = 500000.0,
                            TypeName = "Bàn Tiêu chuẩn 2"
                        },
                        new
                        {
                            TableTypeId = new Guid("06a34a09-3316-4bae-be29-94affd7dc66b"),
                            Description = "Bàn Quầy Bar phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán và được phụ vụ trực tiếp bởi các Bartender, mức giá tối thiểu chỉ từ 200.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 1,
                            MinimumGuest = 1,
                            MinimumPrice = 100000.0,
                            TypeName = "Bàn Quầy Bar"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Accounts")
                        .HasForeignKey("BarId");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Bookings")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingTables")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Table", "Table")
                        .WithMany("BookingTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Drinks")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.DrinkCategory", "DrinkCategory")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("DrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("DrinkEmotionalCategories")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EmotionalDrinkCategory", "EmotionalDrinkCategory")
                        .WithMany()
                        .HasForeignKey("EmotionalDrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("EmotionalDrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Tables")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TableType", "TableType")
                        .WithMany("Tables")
                        .HasForeignKey("TableTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Bookings");

                    b.Navigation("Drinks");

                    b.Navigation("Feedbacks");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("DrinkEmotionalCategories");
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
