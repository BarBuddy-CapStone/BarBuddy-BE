// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440001"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2726), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1980, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "admin1@barbuddy1.com",
                            Fullname = "Admin Bar Buddy1",
                            Image = "admin1.png",
                            Password = "2757cb3cafc39af451abb2697be79b4ab61d63d74d85b0418629de8c26811b529f3f3780d0150063ff55a2beee74c4ec102a2a2731a1f1f7f10d473ad18a6a87",
                            Phone = "0901234567",
                            RoleId = new Guid("b3b5a546-519d-411b-89d0-20c824e18d11"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2730), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440002"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2740), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1992, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "staff1@barbuddy2.com",
                            Fullname = "Staff Bar Buddy2",
                            Image = "staff1.png",
                            Password = "password456",
                            Phone = "0901234568",
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2740), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440003"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2747), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1990, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "staff2@barbuddy3.com",
                            Fullname = "Staff Bar Buddy3",
                            Image = "staff2.png",
                            Password = "password789",
                            Phone = "0901234569",
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2747), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440004"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2752), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1985, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer1@barbuddy4.com",
                            Fullname = "Customer Bar Buddy4",
                            Image = "customer1.png",
                            Password = "password321",
                            Phone = "0901234570",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2753), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2758), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1993, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer2@barbuddy6.com",
                            Fullname = "Customer Bar Buddy6",
                            Image = "customer2.png",
                            Password = "password987",
                            Phone = "0901234572",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2759), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440007"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2763), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1987, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "staff3@barbuddy7.com",
                            Fullname = "Staff Bar Buddy7",
                            Image = "staff3.png",
                            Password = "password111",
                            Phone = "0901234573",
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2764), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440009"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2768), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1994, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer3@barbuddy9.com",
                            Fullname = "Customer Bar Buddy9",
                            Image = "customer3.png",
                            Password = "password333",
                            Phone = "0901234575",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2769), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440010"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2773), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1982, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer4@barbuddy10.com",
                            Fullname = "Customer Bar Buddy10",
                            Image = "customer4.png",
                            Password = "password444",
                            Phone = "0901234576",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2773), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Property<Guid>("BarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BarName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BarId");

                    b.ToTable("Bar");

                    b.HasData(
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            Address = "87A Hàm Nghi, Phường Nguyễn Thái Bình, Quận 1",
                            BarName = "Bar Buddy 1",
                            Description = "Nơi lý tưởng để thư giãn và tận hưởng âm nhạc.",
                            Discount = 10.0,
                            Email = "contact@barbuddy1.com",
                            EndTime = new TimeSpan(0, 2, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/a0d4292c13b0cc51b2487f4c276cd7c0d96510872c4a855db190ff2db8e692d2?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234567",
                            StartTime = new TimeSpan(0, 18, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            Address = "153 Tôn Thất Đạm, Bến Nghé, quận 1, Hồ Chí Minh",
                            BarName = "Bar Buddy 2",
                            Description = "Quán bar phong cách trẻ trung với nhiều sự kiện thú vị.",
                            Discount = 15.0,
                            Email = "contact@barbuddy2.com",
                            EndTime = new TimeSpan(0, 3, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/7cbd7d84e2ff7b5156aa5241bd27de56fe00bcb6e309e2c77ff2c39bf3b0b236?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234568",
                            StartTime = new TimeSpan(0, 17, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            Address = "264 Đ. Nam Kỳ Khởi Nghĩa, Phường 8, Quận 3",
                            BarName = "Bar Buddy 3",
                            Description = "Không gian sang trọng và dịch vụ tận tâm.",
                            Discount = 20.0,
                            Email = "contact@barbuddy3.com",
                            EndTime = new TimeSpan(0, 1, 0, 0, 0),
                            Images = "https://vietnamnightlife.com/uploads/images/2020/02/1580805657-multi_product20-bambamoverview1.jpg.webp",
                            PhoneNumber = "0901234569",
                            StartTime = new TimeSpan(0, 19, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Address = "3C Đ. Tôn Đức Thắng, Bến Nghé, Quận 1, Thành phố Hồ Chí Minh",
                            BarName = "Bar Buddy 4",
                            Description = "Chuyên phục vụ cocktail và đồ uống cao cấp.",
                            Discount = 25.0,
                            Email = "contact@barbuddy4.com",
                            EndTime = new TimeSpan(0, 4, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/4f4bc5cae670ae75847bb24a78027e45ce8487386c0a1043f999381ae9fa4831?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234570",
                            StartTime = new TimeSpan(0, 20, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440004"),
                            Address = "11 Đ.Nam Quốc Cang, Phường Phạm Ngũ Lão, Quận 1",
                            BarName = "Bar Buddy 5",
                            Description = "Quán bar kết hợp giữa nhạc sống và DJ.",
                            Discount = 5.0,
                            Email = "contact@barbuddy5.com",
                            EndTime = new TimeSpan(0, 2, 30, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/fc1f4652930fe4a25d46a46d1933e950912b6ceace8e777840ceccd123995783?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234571",
                            StartTime = new TimeSpan(0, 18, 30, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440005"),
                            Address = "41 Nam Kỳ Khởi Nghĩa, Phường Nguyễn Thái Bình, Quận 1, Hồ Chí Minh",
                            BarName = "Bar Buddy 6",
                            Description = "Không gian thoải mái với nhiều trò chơi giải trí.",
                            Discount = 10.0,
                            Email = "contact@barbuddy6.com",
                            EndTime = new TimeSpan(0, 3, 30, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/677e2c38ccd2ea07e8a72aa6262c873572a4cfd3da719a1e25c2152169bb47c6?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234572",
                            StartTime = new TimeSpan(0, 17, 30, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440006"),
                            Address = "20 Đ. Nguyễn Công Trứ, Phường Nguyễn Thái Bình, Quận 1",
                            BarName = "Bar Buddy 7",
                            Description = "Nơi hội tụ của những tâm hồn yêu thích âm nhạc.",
                            Discount = 30.0,
                            Email = "contact@barbuddy7.com",
                            EndTime = new TimeSpan(0, 1, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/2f3601dbe8c6d0a812bccaf7ecf02686ec5b99038e314c058a00a37c16840608?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234573",
                            StartTime = new TimeSpan(0, 19, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440007"),
                            Address = "120 Đ. Nguyễn Huệ, Bến Nghé, Quận 1",
                            BarName = "Bar Buddy 8",
                            Description = "Quán bar rooftop với tầm nhìn đẹp.",
                            Discount = 20.0,
                            Email = "contact@barbuddy8.com",
                            EndTime = new TimeSpan(0, 2, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/7cbd7d84e2ff7b5156aa5241bd27de56fe00bcb6e309e2c77ff2c39bf3b0b236?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234574",
                            StartTime = new TimeSpan(0, 17, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440008"),
                            Address = "30 Đ. Tôn Thất Tùng, Quận 1",
                            BarName = "Bar Buddy 9",
                            Description = "Quán bar dành cho các tín đồ yêu thích craft beer.",
                            Discount = 15.0,
                            Email = "contact@barbuddy9.com",
                            EndTime = new TimeSpan(0, 3, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/7cbd7d84e2ff7b5156aa5241bd27de56fe00bcb6e309e2c77ff2c39bf3b0b236?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234575",
                            StartTime = new TimeSpan(0, 18, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440009"),
                            Address = "25 Đ. Lê Duẩn, Quận 1",
                            BarName = "Bar Buddy 10",
                            Description = "Không gian ấm cúng với các loại cocktail độc đáo.",
                            Discount = 10.0,
                            Email = "contact@barbuddy10.com",
                            EndTime = new TimeSpan(0, 2, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/a0d4292c13b0cc51b2487f4c276cd7c0d96510872c4a855db190ff2db8e692d2?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234576",
                            StartTime = new TimeSpan(0, 19, 0, 0, 0),
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("BookingTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsIncludeDrink")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.ToTable("Booking");

                    b.HasData(
                        new
                        {
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440001"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            BookingCode = "BB0001",
                            BookingDate = new DateTimeOffset(new DateTime(2024, 10, 3, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2988), new TimeSpan(0, 7, 0, 0, 0)),
                            BookingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreateAt = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2983),
                            IsIncludeDrink = false,
                            Status = 1
                        },
                        new
                        {
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440002"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            BookingCode = "BB0002",
                            BookingDate = new DateTimeOffset(new DateTime(2024, 10, 1, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(2999), new TimeSpan(0, 7, 0, 0, 0)),
                            BookingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreateAt = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2996),
                            IsIncludeDrink = false,
                            Status = 2
                        },
                        new
                        {
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440003"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            BookingCode = "BB0003",
                            BookingDate = new DateTimeOffset(new DateTime(2024, 10, 5, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3004), new TimeSpan(0, 7, 0, 0, 0)),
                            BookingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreateAt = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(3001),
                            IsIncludeDrink = false,
                            Status = 1
                        },
                        new
                        {
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440004"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            BookingCode = "BB0004",
                            BookingDate = new DateTimeOffset(new DateTime(2024, 10, 6, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3009), new TimeSpan(0, 7, 0, 0, 0)),
                            BookingTime = new TimeSpan(0, 0, 0, 0, 0),
                            CreateAt = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(3007),
                            IsIncludeDrink = false,
                            Status = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.Property<Guid>("BookingDrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("ActualPrice")
                        .HasColumnType("double");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookingDrinkId");

                    b.HasIndex("BookingId");

                    b.HasIndex("DrinkId");

                    b.ToTable("BookingDrink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.Property<Guid>("BookingTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ReservationTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookingTableId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TableId");

                    b.ToTable("BookingTable");

                    b.HasData(
                        new
                        {
                            BookingTableId = new Guid("b61a63c3-24f1-4fa0-80ee-f20e0a27808d"),
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            ReservationDate = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3026), new TimeSpan(0, 7, 0, 0, 0)),
                            ReservationTime = new TimeSpan(0, 0, 0, 0, 0),
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330000")
                        },
                        new
                        {
                            BookingTableId = new Guid("b0728607-ecd5-4c56-97b8-b90385af6d37"),
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            ReservationDate = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3031), new TimeSpan(0, 7, 0, 0, 0)),
                            ReservationTime = new TimeSpan(0, 0, 0, 0, 0),
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330001")
                        },
                        new
                        {
                            BookingTableId = new Guid("10bba50b-45f8-4b11-bf9b-7b7a5a3f5a9d"),
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            ReservationDate = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3034), new TimeSpan(0, 7, 0, 0, 0)),
                            ReservationTime = new TimeSpan(0, 0, 0, 0, 0),
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330002")
                        },
                        new
                        {
                            BookingTableId = new Guid("bdf6dfad-1fdf-49e7-9abe-0b8a0bb425a6"),
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            ReservationDate = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3037), new TimeSpan(0, 7, 0, 0, 0)),
                            ReservationTime = new TimeSpan(0, 0, 0, 0, 0),
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330005")
                        },
                        new
                        {
                            BookingTableId = new Guid("543b332e-2ea8-4df5-8b9f-5df7246dfdb4"),
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            ReservationDate = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3041), new TimeSpan(0, 7, 0, 0, 0)),
                            ReservationTime = new TimeSpan(0, 0, 0, 0, 0),
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330006")
                        },
                        new
                        {
                            BookingTableId = new Guid("ccd1cc0a-5204-4bb4-ab73-92627e59b03b"),
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            ReservationDate = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3044), new TimeSpan(0, 7, 0, 0, 0)),
                            ReservationTime = new TimeSpan(0, 0, 0, 0, 0),
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330007")
                        },
                        new
                        {
                            BookingTableId = new Guid("6f3f337b-7261-49be-ba95-a31e8a2413ca"),
                            BookingId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            ReservationDate = new DateTimeOffset(new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Unspecified).AddTicks(3047), new TimeSpan(0, 7, 0, 0, 0)),
                            ReservationTime = new TimeSpan(0, 0, 0, 0, 0),
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330008")
                        });
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("DrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DrinkCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DrinkId");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("Drink");

                    b.HasData(
                        new
                        {
                            DrinkId = new Guid("550d7300-f30c-30c3-b827-335544330000"),
                            CreatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2944),
                            Description = "Nước ngọt có ga phổ biến.",
                            DrinkCategoryId = new Guid("7a8bb8fd-f323-4a3d-b7c6-bfe0fc28f77a"),
                            DrinkCode = "D0001",
                            DrinkName = "Coca Cola",
                            Image = "https://www.coca-cola.com/content/dam/onexp/vn/home-image/coca-cola/Coca-Cola_OT%20320ml_VN-EX_Desktop.png",
                            Price = 15000.0,
                            Status = true,
                            UpdatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2944)
                        },
                        new
                        {
                            DrinkId = new Guid("550d7300-f30c-30c3-b827-335544330001"),
                            CreatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2949),
                            Description = "Cocktail nổi tiếng pha từ rượu rum và bạc hà.",
                            DrinkCategoryId = new Guid("e1dbebd0-8140-4aa2-98f0-d154cca1e249"),
                            DrinkCode = "D0002",
                            DrinkName = "Mojito",
                            Image = "https://www.liquor.com/thmb/MJRVqf-itJGY90nwUOYGXnyG-HA=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/mojito-720x720-primary-6a57f80e200c412e9a77a1687f312ff7.jpg",
                            Price = 70000.0,
                            Status = true,
                            UpdatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2950)
                        },
                        new
                        {
                            DrinkId = new Guid("550d7300-f30c-30c3-b827-335544330002"),
                            CreatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2953),
                            Description = "Trà xanh kết hợp với vị ngọt của đào.",
                            DrinkCategoryId = new Guid("5fd662a6-10c4-4cda-97dd-dfde1603d8ec"),
                            DrinkCode = "D0003",
                            DrinkName = "Trà Đào",
                            Image = "https://file.hstatic.net/200000684957/article/tra-dao_e022b1a9ac564ee186007875701ac643.jpg",
                            Price = 35000.0,
                            Status = true,
                            UpdatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2954)
                        },
                        new
                        {
                            DrinkId = new Guid("550d7300-f30c-30c3-b827-335544330003"),
                            CreatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2957),
                            Description = "Nước ngọt có ga, phổ biến tương tự Coca Cola.",
                            DrinkCategoryId = new Guid("7a8bb8fd-f323-4a3d-b7c6-bfe0fc28f77a"),
                            DrinkCode = "D0004",
                            DrinkName = "Pepsi",
                            Image = "http://thepizzacompany.vn/images/thumbs/000/0002364_pepsi-15l-pet_500.jpeg",
                            Price = 15000.0,
                            Status = true,
                            UpdatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2957)
                        },
                        new
                        {
                            DrinkId = new Guid("550d7300-f30c-30c3-b827-335544330004"),
                            CreatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2960),
                            Description = "Cocktail kết hợp giữa rượu vodka và nước cam.",
                            DrinkCategoryId = new Guid("5fc58d36-18dc-4f24-a4e6-2ec8969c51f6"),
                            DrinkCode = "D0005",
                            DrinkName = "Screwdriver",
                            Image = "https://www.liquor.com/thmb/RnOVWoIXp7OAJRS-NSDIF9Bglbc=/1500x0/filters:no_upscale():max_bytes(150000):strip_icc()/LQR-screwdriver-original-4000x4000-edb2f56dd69146bba9f7fafbf69e00a0.jpg",
                            Price = 80000.0,
                            Status = true,
                            UpdatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2961)
                        },
                        new
                        {
                            DrinkId = new Guid("550d7300-f30c-30c3-b827-335544330005"),
                            CreatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2964),
                            Description = "Cà phê đen pha đậm, không đường, không sữa.",
                            DrinkCategoryId = new Guid("a9b2130d-2c27-4db1-87e5-892259c635ca"),
                            DrinkCode = "D0006",
                            DrinkName = "Cà phê đen",
                            Image = "https://suckhoedoisong.qltns.mediacdn.vn/324455921873985536/2024/8/14/2121767707dcce179f6866d132a2d6a384312f9-1723600454996-1723600455541950721311.jpg",
                            Price = 15000.0,
                            Status = true,
                            UpdatedDate = new DateTime(2024, 10, 8, 18, 57, 44, 513, DateTimeKind.Local).AddTicks(2965)
                        });
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Property<Guid>("DrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinksCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDrinkCategory")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DrinksCategoryId");

                    b.ToTable("DrinkCategory");

                    b.HasData(
                        new
                        {
                            DrinksCategoryId = new Guid("7a8bb8fd-f323-4a3d-b7c6-bfe0fc28f77a"),
                            Description = "Đồ uống không cồn như soda, nước ngọt có ga, và nước ngọt có hương vị.",
                            DrinksCategoryName = "Nước ngọt",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("e1dbebd0-8140-4aa2-98f0-d154cca1e249"),
                            Description = "Đồ uống pha trộn thường chứa cồn, kết hợp với nước trái cây, soda hoặc các nguyên liệu khác.",
                            DrinksCategoryName = "Cocktail",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("5fd662a6-10c4-4cda-97dd-dfde1603d8ec"),
                            Description = "Phiên bản không cồn của các loại cocktail, phù hợp cho những người không uống rượu.",
                            DrinksCategoryName = "Mocktail",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("5fc58d36-18dc-4f24-a4e6-2ec8969c51f6"),
                            Description = "Đồ uống có cồn mạnh như vodka, whisky, gin, rum, v.v.",
                            DrinksCategoryName = "Rượu mạnh",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("9ffef6ce-d455-41ae-8548-e5b710d169c1"),
                            Description = "Đồ uống có cồn được ủ từ lúa mạch, hoa bia và nước. Có nhiều loại khác nhau như lager, ale, stout.",
                            DrinksCategoryName = "Bia",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("91ff9f16-79b0-4fe3-a9c0-7b616c60e62c"),
                            Description = "Đồ uống có cồn được làm từ nho lên men, có nhiều loại như vang đỏ, vang trắng và vang hồng.",
                            DrinksCategoryName = "Rượu vang",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("6d8eafd8-fb10-47c5-9272-03ad4585fc6e"),
                            Description = "Đồ uống nóng hoặc lạnh được pha từ lá trà, có nhiều loại như trà đen, trà xanh và trà thảo mộc.",
                            DrinksCategoryName = "Trà",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("a9b2130d-2c27-4db1-87e5-892259c635ca"),
                            Description = "Đồ uống nóng hoặc lạnh được pha từ hạt cà phê rang, bao gồm espresso, cappuccino, latte và nhiều loại khác.",
                            DrinksCategoryName = "Cà phê",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("a17d366a-2f40-4d8f-a8d1-40a2eecd28ca"),
                            Description = "Đồ uống tự nhiên được làm từ nước ép trái cây hoặc rau củ. Các loại phổ biến gồm nước cam, nước táo, và nước ép cà rốt.",
                            DrinksCategoryName = "Nước ép",
                            IsDrinkCategory = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.Property<Guid>("DrinkEmotionalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmotionalDrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("DrinkEmotionalCategoryId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("EmotionalDrinkCategoryId");

                    b.ToTable("DrinkEmotionalCategory");
                });

            modelBuilder.Entity("Domain.Entities.EmotionalDrinkCategory", b =>
                {
                    b.Property<Guid>("EmotionalDrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EmotionalDrinksCategoryId");

                    b.ToTable("EmotionalDrinkCategory");

                    b.HasData(
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("e7e8e0e5-b2fc-44b5-be85-7e0ceec369c2"),
                            CategoryName = "vui"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("a71aa92a-91ee-4fce-9fed-33169a9116d3"),
                            CategoryName = "buồn"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("2c7117c4-0cb0-4ca1-bd1f-42644da62670"),
                            CategoryName = "hạnh phúc"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("2e6a5ca5-2ca9-4444-97f7-0ef3c958e1f0"),
                            CategoryName = "tức giận"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("1f9562c1-8b23-4381-8d60-e0440ac87d43"),
                            CategoryName = "chán nản"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("302f5f86-deaf-4af1-a224-629b3a0cec21"),
                            CategoryName = "đang yêu"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("BookingId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.Property<Guid>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PaymentFee")
                        .HasColumnType("double");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentHistory");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("b3b5a546-519d-411b-89d0-20c824e18d11"),
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            RoleName = "STAFF"
                        },
                        new
                        {
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            RoleName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TableTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("TableId");

                    b.HasIndex("BarId");

                    b.HasIndex("TableTypeId");

                    b.ToTable("Table");

                    b.HasData(
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330000"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table A1",
                            TableTypeId = new Guid("25385f1f-6a45-4426-a4f2-b40a3946abd3")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330001"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B1",
                            TableTypeId = new Guid("88aa24ed-028d-42af-8476-796d68736096")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330002"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table C1",
                            TableTypeId = new Guid("ea17dcb7-5e93-43b3-be82-828cc2615d8d")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330003"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table A2",
                            TableTypeId = new Guid("34956623-47b9-41a2-b7fc-d949b57fa704")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330004"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330005"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330006"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330007"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330008"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330009"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330010"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        },
                        new
                        {
                            TableId = new Guid("660d7300-f30c-30c3-b827-335544330011"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            IsDeleted = false,
                            Status = 0,
                            TableName = "Table B2",
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a")
                        });
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Property<Guid>("TableTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaximumGuest")
                        .HasColumnType("int");

                    b.Property<int>("MinimumGuest")
                        .HasColumnType("int");

                    b.Property<double>("MinimumPrice")
                        .HasColumnType("double");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TableTypeId");

                    b.ToTable("TableType");

                    b.HasData(
                        new
                        {
                            TableTypeId = new Guid("34956623-47b9-41a2-b7fc-d949b57fa704"),
                            Description = "Bàn SVIP phù hợp cho khách hàng muốn trải nghiệm dịch vụ chất lượng cao nhất tại quán, phù hợp cho nhóm khách hàng từ 1-15 người, mức giá tối thiểu chỉ từ 10.000.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 15,
                            MinimumGuest = 1,
                            MinimumPrice = 10000000.0,
                            TypeName = "Bàn SVIP"
                        },
                        new
                        {
                            TableTypeId = new Guid("98f0023d-7f14-4bc4-b8ac-8e29f5ff9e4a"),
                            Description = "Bàn VIP phù hợp cho khách hàng muốn trải nghiệm dịch vụ chất lượng cao tại quán, phù hợp cho nhóm khách hàng từ 1-10 người, mức giá tối thiểu chỉ từ 5.000.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 10,
                            MinimumGuest = 1,
                            MinimumPrice = 5000000.0,
                            TypeName = "Bàn VIP"
                        },
                        new
                        {
                            TableTypeId = new Guid("25385f1f-6a45-4426-a4f2-b40a3946abd3"),
                            Description = "Bàn Tiêu chuẩn 1 phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán, phù hợp cho nhóm khách hàng từ 1-4 người, mức giá tối thiểu chỉ từ 200.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 4,
                            MinimumGuest = 1,
                            MinimumPrice = 200000.0,
                            TypeName = "Bàn Tiêu chuẩn 1"
                        },
                        new
                        {
                            TableTypeId = new Guid("ea17dcb7-5e93-43b3-be82-828cc2615d8d"),
                            Description = "Bàn Tiêu chuẩn 2 phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán, phù hợp cho nhóm khách hàng từ 4-6 người, mức giá tối thiểu chỉ từ 500.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 6,
                            MinimumGuest = 4,
                            MinimumPrice = 500000.0,
                            TypeName = "Bàn Tiêu chuẩn 2"
                        },
                        new
                        {
                            TableTypeId = new Guid("88aa24ed-028d-42af-8476-796d68736096"),
                            Description = "Bàn Quầy Bar phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán và được phụ vụ trực tiếp bởi các Bartender, mức giá tối thiểu chỉ từ 200.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 1,
                            MinimumGuest = 1,
                            MinimumPrice = 100000.0,
                            TypeName = "Bàn Quầy Bar"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Accounts")
                        .HasForeignKey("BarId");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Bookings")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingTables")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Table", "Table")
                        .WithMany("BookingTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.HasOne("Domain.Entities.DrinkCategory", "DrinkCategory")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("DrinkEmotionalCategories")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EmotionalDrinkCategory", "EmotionalDrinkCategory")
                        .WithMany()
                        .HasForeignKey("EmotionalDrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("EmotionalDrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Tables")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TableType", "TableType")
                        .WithMany("Tables")
                        .HasForeignKey("TableTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("DrinkEmotionalCategories");
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
