// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTimeOffset>("Dob")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("RoleId");

                    b.ToTable("Account");

                    b.HasData(
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440001"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2195), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1980, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "admin1@barbuddy1.com",
                            Fullname = "Admin Bar Buddy1",
                            Image = "admin1.png",
                            Password = "password123",
                            Phone = "0901234567",
                            RoleId = new Guid("b3b5a546-519d-411b-89d0-20c824e18d11"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2199), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440002"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2206), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1992, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "staff1@barbuddy2.com",
                            Fullname = "Staff Bar Buddy2",
                            Image = "staff1.png",
                            Password = "password456",
                            Phone = "0901234568",
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2206), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440003"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2215), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1990, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "staff2@barbuddy3.com",
                            Fullname = "Staff Bar Buddy3",
                            Image = "staff2.png",
                            Password = "password789",
                            Phone = "0901234569",
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2215), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440004"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2219), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1985, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer1@barbuddy4.com",
                            Fullname = "Customer Bar Buddy4",
                            Image = "customer1.png",
                            Password = "password321",
                            Phone = "0901234570",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2220), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2224), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1993, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer2@barbuddy6.com",
                            Fullname = "Customer Bar Buddy6",
                            Image = "customer2.png",
                            Password = "password987",
                            Phone = "0901234572",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2225), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440007"),
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440006"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2230), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1987, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "staff3@barbuddy7.com",
                            Fullname = "Staff Bar Buddy7",
                            Image = "staff3.png",
                            Password = "password111",
                            Phone = "0901234573",
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2232), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440009"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2237), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1994, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer3@barbuddy9.com",
                            Fullname = "Customer Bar Buddy9",
                            Image = "customer3.png",
                            Password = "password333",
                            Phone = "0901234575",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2238), new TimeSpan(0, 7, 0, 0, 0))
                        },
                        new
                        {
                            AccountId = new Guid("550e8400-e29b-41d4-b777-446655440010"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2243), new TimeSpan(0, 7, 0, 0, 0)),
                            Dob = new DateTimeOffset(new DateTime(1982, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "customer4@barbuddy10.com",
                            Fullname = "Customer Bar Buddy10",
                            Image = "customer4.png",
                            Password = "password444",
                            Phone = "0901234576",
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            Status = 1,
                            UpdatedAt = new DateTimeOffset(new DateTime(2024, 10, 5, 22, 7, 28, 387, DateTimeKind.Unspecified).AddTicks(2243), new TimeSpan(0, 7, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Property<Guid>("BarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BarName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Discount")
                        .HasColumnType("double");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("BarId");

                    b.ToTable("Bar");

                    b.HasData(
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            Address = "87A Hàm Nghi, Phường Nguyễn Thái Bình, Quận 1",
                            BarName = "Bar Buddy 1",
                            Description = "Nơi lý tưởng để thư giãn và tận hưởng âm nhạc.",
                            Discount = 10.0,
                            Email = "contact@barbuddy1.com",
                            EndTime = new TimeSpan(0, 2, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/a0d4292c13b0cc51b2487f4c276cd7c0d96510872c4a855db190ff2db8e692d2?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234567",
                            StartTime = new TimeSpan(0, 18, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440001"),
                            Address = "153 Tôn Thất Đạm, Bến Nghé, quận 1, Hồ Chí Minh",
                            BarName = "Bar Buddy 2",
                            Description = "Quán bar phong cách trẻ trung với nhiều sự kiện thú vị.",
                            Discount = 15.0,
                            Email = "contact@barbuddy2.com",
                            EndTime = new TimeSpan(0, 3, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/7cbd7d84e2ff7b5156aa5241bd27de56fe00bcb6e309e2c77ff2c39bf3b0b236?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234568",
                            StartTime = new TimeSpan(0, 17, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440002"),
                            Address = "264 Đ. Nam Kỳ Khởi Nghĩa, Phường 8, Quận 3",
                            BarName = "Bar Buddy 3",
                            Description = "Không gian sang trọng và dịch vụ tận tâm.",
                            Discount = 20.0,
                            Email = "contact@barbuddy3.com",
                            EndTime = new TimeSpan(0, 1, 0, 0, 0),
                            Images = "https://vietnamnightlife.com/uploads/images/2020/02/1580805657-multi_product20-bambamoverview1.jpg.webp",
                            PhoneNumber = "0901234569",
                            StartTime = new TimeSpan(0, 19, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440003"),
                            Address = "3C Đ. Tôn Đức Thắng, Bến Nghé, Quận 1, Thành phố Hồ Chí Minh",
                            BarName = "Bar Buddy 4",
                            Description = "Chuyên phục vụ cocktail và đồ uống cao cấp.",
                            Discount = 25.0,
                            Email = "contact@barbuddy4.com",
                            EndTime = new TimeSpan(0, 4, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/4f4bc5cae670ae75847bb24a78027e45ce8487386c0a1043f999381ae9fa4831?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234570",
                            StartTime = new TimeSpan(0, 20, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440004"),
                            Address = "11 Đ.Nam Quốc Cang, Phường Phạm Ngũ Lão, Quận 1",
                            BarName = "Bar Buddy 5",
                            Description = "Quán bar kết hợp giữa nhạc sống và DJ.",
                            Discount = 5.0,
                            Email = "contact@barbuddy5.com",
                            EndTime = new TimeSpan(0, 2, 30, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/fc1f4652930fe4a25d46a46d1933e950912b6ceace8e777840ceccd123995783?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234571",
                            StartTime = new TimeSpan(0, 18, 30, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440005"),
                            Address = "41 Nam Kỳ Khởi Nghĩa, Phường Nguyễn Thái Bình, Quận 1, Hồ Chí Minh",
                            BarName = "Bar Buddy 6",
                            Description = "Không gian thoải mái với nhiều trò chơi giải trí.",
                            Discount = 10.0,
                            Email = "contact@barbuddy6.com",
                            EndTime = new TimeSpan(0, 3, 30, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/677e2c38ccd2ea07e8a72aa6262c873572a4cfd3da719a1e25c2152169bb47c6?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234572",
                            StartTime = new TimeSpan(0, 17, 30, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440006"),
                            Address = "20 Đ. Nguyễn Công Trứ, Phường Nguyễn Thái Bình, Quận 1",
                            BarName = "Bar Buddy 7",
                            Description = "Nơi hội tụ của những tâm hồn yêu thích âm nhạc.",
                            Discount = 30.0,
                            Email = "contact@barbuddy7.com",
                            EndTime = new TimeSpan(0, 1, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/2f3601dbe8c6d0a812bccaf7ecf02686ec5b99038e314c058a00a37c16840608?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234573",
                            StartTime = new TimeSpan(0, 19, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440007"),
                            Address = "120 Đ. Nguyễn Huệ, Bến Nghé, Quận 1",
                            BarName = "Bar Buddy 8",
                            Description = "Quán bar rooftop với tầm nhìn đẹp.",
                            Discount = 20.0,
                            Email = "contact@barbuddy8.com",
                            EndTime = new TimeSpan(0, 2, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/7cbd7d84e2ff7b5156aa5241bd27de56fe00bcb6e309e2c77ff2c39bf3b0b236?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234574",
                            StartTime = new TimeSpan(0, 17, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440008"),
                            Address = "30 Đ. Tôn Thất Tùng, Quận 1",
                            BarName = "Bar Buddy 9",
                            Description = "Quán bar dành cho các tín đồ yêu thích craft beer.",
                            Discount = 15.0,
                            Email = "contact@barbuddy9.com",
                            EndTime = new TimeSpan(0, 3, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/7cbd7d84e2ff7b5156aa5241bd27de56fe00bcb6e309e2c77ff2c39bf3b0b236?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234575",
                            StartTime = new TimeSpan(0, 18, 0, 0, 0),
                            Status = true
                        },
                        new
                        {
                            BarId = new Guid("550e8400-e29b-41d4-a716-446655440009"),
                            Address = "25 Đ. Lê Duẩn, Quận 1",
                            BarName = "Bar Buddy 10",
                            Description = "Không gian ấm cúng với các loại cocktail độc đáo.",
                            Discount = 10.0,
                            Email = "contact@barbuddy10.com",
                            EndTime = new TimeSpan(0, 2, 0, 0, 0),
                            Images = "https://cdn.builder.io/api/v1/image/assets/TEMP/a0d4292c13b0cc51b2487f4c276cd7c0d96510872c4a855db190ff2db8e692d2?placeholderIfAbsent=true&apiKey=2f0fb41b041549e2a3975f3618160d3b",
                            PhoneNumber = "0901234576",
                            StartTime = new TimeSpan(0, 19, 0, 0, 0),
                            Status = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<string>("BookingCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("BookingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("BookingTime")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsIncludeDrink")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.ToTable("Booking");
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.Property<Guid>("BookingDrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double>("ActualPrice")
                        .HasColumnType("double");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("BookingDrinkId");

                    b.HasIndex("BookingId");

                    b.HasIndex("DrinkId");

                    b.ToTable("BookingDrink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.Property<Guid>("BookingTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("ReservationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("ReservationTime")
                        .HasColumnType("time(6)");

                    b.Property<Guid>("TableId")
                        .HasColumnType("char(36)");

                    b.HasKey("BookingTableId");

                    b.HasIndex("BookingId");

                    b.HasIndex("TableId");

                    b.ToTable("BookingTable");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Property<Guid>("DrinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("DrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.Property<string>("DrinkCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinkName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("DrinkId");

                    b.HasIndex("DrinkCategoryId");

                    b.ToTable("Drink");
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Property<Guid>("DrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DrinksCategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDrinkCategory")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("DrinksCategoryId");

                    b.ToTable("DrinkCategory");

                    b.HasData(
                        new
                        {
                            DrinksCategoryId = new Guid("7e811835-2c89-4a86-a0c7-322e7db3aba4"),
                            Description = "Đồ uống không cồn như soda, nước ngọt có ga, và nước ngọt có hương vị.",
                            DrinksCategoryName = "Nước ngọt",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("9670dde8-9ad9-4e28-ae79-f50e16d0604e"),
                            Description = "Đồ uống pha trộn thường chứa cồn, kết hợp với nước trái cây, soda hoặc các nguyên liệu khác.",
                            DrinksCategoryName = "Cocktail",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("6b42c208-3d5e-4fed-afe4-19bf5a9659c3"),
                            Description = "Phiên bản không cồn của các loại cocktail, phù hợp cho những người không uống rượu.",
                            DrinksCategoryName = "Mocktail",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("1133e20a-bc7d-4ab0-b5bb-18e8aec307a3"),
                            Description = "Đồ uống có cồn mạnh như vodka, whisky, gin, rum, v.v.",
                            DrinksCategoryName = "Rượu mạnh",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("d96f117a-aeb5-46c3-aa12-b0cb25627db3"),
                            Description = "Đồ uống có cồn được ủ từ lúa mạch, hoa bia và nước. Có nhiều loại khác nhau như lager, ale, stout.",
                            DrinksCategoryName = "Bia",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("50e55732-16cb-4989-8bf9-ba88f0726bd8"),
                            Description = "Đồ uống có cồn được làm từ nho lên men, có nhiều loại như vang đỏ, vang trắng và vang hồng.",
                            DrinksCategoryName = "Rượu vang",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("96a86c01-ca27-4410-94d5-5ffaa3091d4d"),
                            Description = "Đồ uống nóng hoặc lạnh được pha từ lá trà, có nhiều loại như trà đen, trà xanh và trà thảo mộc.",
                            DrinksCategoryName = "Trà",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("351458aa-e933-4d52-b234-e69a00733548"),
                            Description = "Đồ uống nóng hoặc lạnh được pha từ hạt cà phê rang, bao gồm espresso, cappuccino, latte và nhiều loại khác.",
                            DrinksCategoryName = "Cà phê",
                            IsDrinkCategory = true
                        },
                        new
                        {
                            DrinksCategoryId = new Guid("58f2969e-b80c-488d-88b7-e5c114913322"),
                            Description = "Đồ uống tự nhiên được làm từ nước ép trái cây hoặc rau củ. Các loại phổ biến gồm nước cam, nước táo, và nước ép cà rốt.",
                            DrinksCategoryName = "Nước ép",
                            IsDrinkCategory = true
                        });
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.Property<Guid>("DrinkEmotionalCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EmotionalDrinkCategoryId")
                        .HasColumnType("char(36)");

                    b.HasKey("DrinkEmotionalCategoryId");

                    b.HasIndex("DrinkId");

                    b.HasIndex("EmotionalDrinkCategoryId");

                    b.ToTable("DrinkEmotionalCategory");
                });

            modelBuilder.Entity("Domain.Entities.EmotionalDrinkCategory", b =>
                {
                    b.Property<Guid>("EmotionalDrinksCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("EmotionalDrinksCategoryId");

                    b.ToTable("EmotionalDrinkCategory");

                    b.HasData(
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("123f7333-5959-4f63-aa35-da79fe571dca"),
                            CategoryName = "vui"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("8c3cb945-6f63-4ac8-afc1-1de8ad1df8b2"),
                            CategoryName = "buồn"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("c9a791ba-14a9-4047-90e4-540b2ccd7007"),
                            CategoryName = "hạnh phúc"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("c54e2200-879b-49d4-a073-2f3f524cabcc"),
                            CategoryName = "tức giận"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("c04e653e-fb8f-4f15-a651-fa28a085d97f"),
                            CategoryName = "chán nản"
                        },
                        new
                        {
                            EmotionalDrinksCategoryId = new Guid("8e362786-148e-4775-90b9-ffe25bca53c8"),
                            CategoryName = "đang yêu"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.Property<Guid>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BarId");

                    b.HasIndex("BookingId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.Property<Guid>("PaymentHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Note")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("PaymentFee")
                        .HasColumnType("double");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("double");

                    b.Property<string>("TransactionCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PaymentHistoryId");

                    b.HasIndex("AccountId");

                    b.HasIndex("BookingId");

                    b.ToTable("PaymentHistory");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RoleId");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("b3b5a546-519d-411b-89d0-20c824e18d11"),
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            RoleId = new Guid("a3438270-b7ed-4222-b3d8-aee52fc58805"),
                            RoleName = "STAFF"
                        },
                        new
                        {
                            RoleId = new Guid("70a545c0-6156-467c-a86f-547370ea4552"),
                            RoleName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Property<Guid>("TableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BarId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TableTypeId")
                        .HasColumnType("char(36)");

                    b.HasKey("TableId");

                    b.HasIndex("BarId");

                    b.HasIndex("TableTypeId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Property<Guid>("TableTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaximumGuest")
                        .HasColumnType("int");

                    b.Property<int>("MinimumGuest")
                        .HasColumnType("int");

                    b.Property<double>("MinimumPrice")
                        .HasColumnType("double");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TableTypeId");

                    b.ToTable("TableType");

                    b.HasData(
                        new
                        {
                            TableTypeId = new Guid("f8b05440-b11f-48d6-877d-c14c6d1e6e23"),
                            Description = "Bàn SVIP phù hợp cho khách hàng muốn trải nghiệm dịch vụ chất lượng cao nhất tại quán, phù hợp cho nhóm khách hàng từ 1-15 người, mức giá tối thiểu chỉ từ 10.000.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 15,
                            MinimumGuest = 1,
                            MinimumPrice = 10000000.0,
                            TypeName = "Bàn SVIP"
                        },
                        new
                        {
                            TableTypeId = new Guid("40d5663b-1d9e-422f-b782-0f6eb73f5115"),
                            Description = "Bàn VIP phù hợp cho khách hàng muốn trải nghiệm dịch vụ chất lượng cao tại quán, phù hợp cho nhóm khách hàng từ 1-10 người, mức giá tối thiểu chỉ từ 5.000.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 10,
                            MinimumGuest = 1,
                            MinimumPrice = 5000000.0,
                            TypeName = "Bàn VIP"
                        },
                        new
                        {
                            TableTypeId = new Guid("78910745-96cc-4f05-8600-09047c23967d"),
                            Description = "Bàn Tiêu chuẩn 1 phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán, phù hợp cho nhóm khách hàng từ 1-4 người, mức giá tối thiểu chỉ từ 200.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 4,
                            MinimumGuest = 1,
                            MinimumPrice = 200000.0,
                            TypeName = "Bàn Tiêu chuẩn 1"
                        },
                        new
                        {
                            TableTypeId = new Guid("4a8dd27d-77ec-446e-90f9-45df4e900683"),
                            Description = "Bàn Tiêu chuẩn 2 phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán, phù hợp cho nhóm khách hàng từ 4-6 người, mức giá tối thiểu chỉ từ 500.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 6,
                            MinimumGuest = 4,
                            MinimumPrice = 500000.0,
                            TypeName = "Bàn Tiêu chuẩn 2"
                        },
                        new
                        {
                            TableTypeId = new Guid("93f03bbd-69d4-43e5-a95b-e215689b175a"),
                            Description = "Bàn Quầy Bar phù hợp cho khách hàng muốn trải nghiệm dịch vụ tiêu chuẩn tại quán và được phụ vụ trực tiếp bởi các Bartender, mức giá tối thiểu chỉ từ 200.000 VND.",
                            IsDeleted = false,
                            MaximumGuest = 1,
                            MinimumGuest = 1,
                            MinimumPrice = 100000.0,
                            TypeName = "Bàn Quầy Bar"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Accounts")
                        .HasForeignKey("BarId");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Bookings")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Bookings")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");
                });

            modelBuilder.Entity("Domain.Entities.BookingDrink", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("BookingDrinks")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Drink");
                });

            modelBuilder.Entity("Domain.Entities.BookingTable", b =>
                {
                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("BookingTables")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Table", "Table")
                        .WithMany("BookingTables")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.HasOne("Domain.Entities.DrinkCategory", "DrinkCategory")
                        .WithMany("Drinks")
                        .HasForeignKey("DrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.DrinkEmotionalCategory", b =>
                {
                    b.HasOne("Domain.Entities.Drink", "Drink")
                        .WithMany("DrinkEmotionalCategories")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.EmotionalDrinkCategory", "EmotionalDrinkCategory")
                        .WithMany()
                        .HasForeignKey("EmotionalDrinkCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("EmotionalDrinkCategory");
                });

            modelBuilder.Entity("Domain.Entities.Feedback", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Feedbacks")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Bar");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.PaymentHistory", b =>
                {
                    b.HasOne("Domain.Entities.Account", "Account")
                        .WithMany("PaymentHistories")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.HasOne("Domain.Entities.Bar", "Bar")
                        .WithMany("Tables")
                        .HasForeignKey("BarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TableType", "TableType")
                        .WithMany("Tables")
                        .HasForeignKey("TableTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bar");

                    b.Navigation("TableType");
                });

            modelBuilder.Entity("Domain.Entities.Account", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("PaymentHistories");
                });

            modelBuilder.Entity("Domain.Entities.Bar", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Bookings");

                    b.Navigation("Feedbacks");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.Drink", b =>
                {
                    b.Navigation("BookingDrinks");

                    b.Navigation("DrinkEmotionalCategories");
                });

            modelBuilder.Entity("Domain.Entities.DrinkCategory", b =>
                {
                    b.Navigation("Drinks");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Domain.Entities.Table", b =>
                {
                    b.Navigation("BookingTables");
                });

            modelBuilder.Entity("Domain.Entities.TableType", b =>
                {
                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
